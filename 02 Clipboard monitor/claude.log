Q> I want to create a Delphi application that would monitor clipboard content (on Windows) and append clipboard content to a log file each time the clipboard has changed (and has a text inside).

A> Here's an example of how you can create a Delphi application that monitors clipboard changes and logs text content:

```delphi
unit MainForm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;

type
  TfrmMain = class(TForm)
    btnStart: TButton;
    btnStop: TButton;
    mmoLog: TMemo;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btnStartClick(Sender: TObject);
    procedure btnStopClick(Sender: TObject);
  private
    FNextViewer: HWND;
    FLogFileName: string;
    FMonitoring: Boolean;
    procedure WMChangeCBChain(var Msg: TWMChangeCBChain); message WM_CHANGECBCHAIN;
    procedure WMDrawClipboard(var Msg: TMessage); message WM_DRAWCLIPBOARD;
    procedure LogClipboardContent;
    procedure StartMonitoring;
    procedure StopMonitoring;
  public
    { Public declarations }
  end;

var
  frmMain: TfrmMain;

implementation

{$R *.dfm}

procedure TfrmMain.FormCreate(Sender: TObject);
begin
  FLogFileName := ChangeFileExt(Application.ExeName, '.log');
  FMonitoring := False;
  btnStop.Enabled := False;
end;

procedure TfrmMain.FormDestroy(Sender: TObject);
begin
  if FMonitoring then
    StopMonitoring;
end;

procedure TfrmMain.StartMonitoring;
begin
  FNextViewer := SetClipboardViewer(Handle);
  FMonitoring := True;
  btnStart.Enabled := False;
  btnStop.Enabled := True;
  mmoLog.Lines.Add('Monitoring started...');
end;

procedure TfrmMain.StopMonitoring;
begin
  ChangeClipboardChain(Handle, FNextViewer);
  FMonitoring := False;
  btnStart.Enabled := True;
  btnStop.Enabled := False;
  mmoLog.Lines.Add('Monitoring stopped...');
end;

procedure TfrmMain.btnStartClick(Sender: TObject);
begin
  StartMonitoring;
end;

procedure TfrmMain.btnStopClick(Sender: TObject);
begin
  StopMonitoring;
end;

procedure TfrmMain.WMChangeCBChain(var Msg: TWMChangeCBChain);
begin
  if Msg.Remove = FNextViewer then
    FNextViewer := Msg.Next
  else if FNextViewer <> 0 then
    SendMessage(FNextViewer, WM_CHANGECBCHAIN, Msg.Remove, Msg.Next);

  Msg.Result := 0;
end;

procedure TfrmMain.WMDrawClipboard(var Msg: TMessage);
begin
  if FMonitoring then
  begin
    LogClipboardContent;
    
    // Pass the message to the next viewer in the chain
    if FNextViewer <> 0 then
      SendMessage(FNextViewer, WM_DRAWCLIPBOARD, 0, 0);
  end;
end;

procedure TfrmMain.LogClipboardContent;
var
  LogFile: TextFile;
  ClipText: string;
begin
  try
    if Clipboard.HasFormat(CF_TEXT) then
    begin
      ClipText := Clipboard.AsText;
      
      // Log to file
      AssignFile(LogFile, FLogFileName);
      if FileExists(FLogFileName) then
        Append(LogFile)
      else
        Rewrite(LogFile);
      try
        WriteLn(LogFile, Format('[%s] %s', [FormatDateTime('yyyy-mm-dd hh:nn:ss', Now), ClipText]));
      finally
        CloseFile(LogFile);
      end;

      // Show in memo
      mmoLog.Lines.Add(Format('[%s] %s', [FormatDateTime('yyyy-mm-dd hh:nn:ss', Now), ClipText]));
    end;
  except
    on E: Exception do
      mmoLog.Lines.Add('Error: ' + E.Message);
  end;
end;

end.
```

And here's the corresponding form design (DFM):

```delphi
object frmMain: TfrmMain
  Left = 0
  Top = 0
  Caption = 'Clipboard Monitor'
  ClientHeight = 300
  ClientWidth = 400
  Color = clBtnFace
  Font.Charset = DEFAULT_CHARSET
  Font.Color = clWindowText
  Font.Height = -11
  Font.Name = 'Tahoma'
  Font.Style = []
  OnCreate = FormCreate
  OnDestroy = FormDestroy
  TextHeight = 13
  object btnStart: TButton
    Left = 8
    Top = 8
    Width = 75
    Height = 25
    Caption = 'Start'
    TabOrder = 0
    OnClick = btnStartClick
  end
  object btnStop: TButton
    Left = 89
    Top = 8
    Width = 75
    Height = 25
    Caption = 'Stop'
    TabOrder = 1
    OnClick = btnStopClick
  end
  object mmoLog: TMemo
    Left = 8
    Top = 39
    Width = 384
    Height = 253
    ScrollBars = ssVertical
    TabOrder = 2
  end
end
```

This application:

1. Creates a window that can monitor clipboard changes using the Windows Clipboard Viewer Chain
2. Has Start/Stop buttons to control the monitoring
3. Shows a log in a memo control on the form
4. Writes clipboard text content to a log file with timestamps
5. Handles clipboard chain properly to work alongside other clipboard monitoring applications

To use it:

1. Create a new VCL Forms Application
2. Copy and paste the code into the unit
3. Set up the form as shown in the DFM
4. Run the application
5. Click "Start" to begin monitoring
6. Any text copied to the clipboard will be logged both to the memo and to a log file

The log file will be created in the same directory as the executable, with the same name but with a .log extension.

Note that this only monitors text content in the clipboard. If you need to monitor other types of clipboard content (images, files, etc.), you'll need to add additional checks and handling for those formats.
